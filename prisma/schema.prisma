// This is your Prisma schema file,    
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init  
  
generator client {               
  provider = "prisma-client-js"            
  //output   = "./node_modules/@prisma/client"        
}                      

datasource db {  
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Departement {
  id        Int               @id @default(autoincrement())
  nom       String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  projets   Projet[]
  users     User[]            @relation("DepartementUtilisateur")
  partages  PartageDocument[]
}

enum Role {               
  SUPER_ADMIN
  ADMIN
  UTILISATEUR
} 

enum Priorite {
  BASSE
  MOYENNE
  ELEVEE
}


model User {
  id                         Int                @id @default(autoincrement())
  nom                        String
  prenom                     String
  email                      String             @unique
  password                   String
  role                       Role               @default(UTILISATEUR)
  departement                Departement?       @relation("DepartementUtilisateur", fields: [departementId], references: [id], onDelete: Cascade)        
  
  departementId              Int?
  image                      String?            //URL profil   

  messagesEnvoyes            Message[]          @relation("MessagesEnvoyes")
  messagesRecus              Message[]          @relation("MessagesRecus")
  lastActiveAt               DateTime?          @default(now()) //<--- Ce champ pour suivre l'activitÃ©  

  createdAt                  DateTime           @default(now())  
  updatedAt                  DateTime           @updatedAt
  projets                    MembreProjet[]
  projetsDiriges             Projet[]           @relation("ChefProjet")
  taches                     TacheUtilisateur[]
  partages                   PartageDocument[]
  partagesEnTantQuePartageur PartageDocument[]  @relation("Partageur")
  notificationsEmises        Notification[]     @relation("NotificationEmetteur")

  notifications              Notification[]     @relation("NotificationDestinataire")

  notes                      Note[]    

  sousTachesProjetSousResponsabilite SousTacheUtilisateur[]

  commentaires               Commentaire[]

  sousTachesDontJeSuisResponsable SousTacheProjet[] @relation("ResponsableSousTacheProjet")

  plannings                  Planning[]
  planningsDiriges           Planning[]         @relation("ResponsablePlanning")

}     

model Document {       
  id            Int               @id @default(autoincrement())
  titre         String
  description   String
  fichier       String?           // chemin du fichier uploadÃ©, optionnel

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt  
  partages      PartageDocument[]
  notifications Notification[]    @relation("DocumentNotification")
  sousTachesProjet SousTacheProjet[] @relation("PiecesJointesSousTache")

}

enum Statut {     
  ATTENTE
  EN_COURS
  TERMINE
}  

model Projet {   
  id            Int               @id @default(autoincrement())
  nom           String
  description   String?
  deadline      DateTime?   
  statut        Statut            @default(ATTENTE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  departement   Departement       @relation(fields: [departementId], references: [id], onDelete: Cascade)

  departementId Int
  chefProjet    User              @relation("ChefProjet", fields: [chefProjetId], references: [id], onDelete: Cascade)  // ðŸ‘ˆ Chef de projet

  chefProjetId  Int
  membres       MembreProjet[]    
  taches        Tache[]
  partages      PartageDocument[]
  notifications Notification[]    @relation("ProjetNotification")
  messages      Message[]

}           
 
model Tache {             
  id               Int                @id @default(autoincrement())
  titre            String
  description      String?
  projet           Projet             @relation(fields: [projetId], references: [id], onDelete: Cascade)

  projetId         Int
  deadline         DateTime?
  statut           Statut             @default(ATTENTE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  TacheUtilisateur TacheUtilisateur[]
  notifications    Notification[]     @relation("TacheNotification")
  messages         Message[]
  sousTachesProjet SousTacheProjet[]

}  

model SousTacheProjet {
  id          Int                   @id @default(autoincrement())
  titre       String
  description String?
  tache       Tache                 @relation(fields: [tacheId], references: [id], onDelete: Cascade)
  tacheId     Int
  statut      Statut                @default(ATTENTE)
  deadline    DateTime?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  utilisateurs SousTacheUtilisateur[]   
  notifications Notification[]      @relation("SousTacheProjetNotification")

  responsable   User?               @relation("ResponsableSousTacheProjet", fields: [responsableId], references: [id], onDelete: SetNull)
  responsableId Int?   

  priorite     Priorite?            @default(MOYENNE)
  piecesJointes Document[]          @relation("PiecesJointesSousTache")
  commentaires  Commentaire[]
}  

model SousTacheUtilisateur {
  sousTacheProjet   SousTacheProjet @relation(fields: [sousTacheProjetId], references: [id], onDelete: Cascade)
  sousTacheProjetId Int
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int  
    
  statutPersonnel Statut?   // ATTENTE, EN_COURS, TERMINE

  dateDebut       DateTime?
  dateFin         DateTime?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@id([sousTacheProjetId, userId])
}

model Commentaire {
  id               Int              @id @default(autoincrement())
  titre            String?
  contenu          String
  estApprobation   Boolean          @default(false)
  auteur           User             @relation(fields: [auteurId], references: [id])
  auteurId         Int
  sousTacheProjet  SousTacheProjet  @relation(fields: [sousTacheProjetId], references: [id], onDelete: Cascade)
  sousTacheProjetId Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

}


model TacheUtilisateur {  
  tache     Tache    @relation(fields: [tacheId], references: [id], onDelete: Cascade)
  tacheId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  statutPersonnel    Statut?   // Nullable

  dateDebut DateTime?         // Nullable

  dateFin   DateTime?         // Nullable

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tacheId, userId])
}

enum RoleProjet {
  MEMBRE
  CHEF_EQUIPE
  DEVELOPPEUR
  DESIGNER
  COMMUNICANT
  QA
}     
  
model MembreProjet {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  projet    Projet   @relation(fields: [projetId], references: [id], onDelete: Cascade)
  projetId  Int
  role      RoleProjet  @default(MEMBRE) // <--- le rÃ´le spÃ©cifique dans le projet
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, projetId])
}

model PartageDocument {
  id            Int          @id @default(autoincrement())
  document      Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)

  documentId    Int
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int?
  departement   Departement? @relation(fields: [departementId], references: [id], onDelete: Cascade)

  departementId Int?
  projet        Projet?      @relation(fields: [projetId], references: [id], onDelete: Cascade)
  projetId      Int?
  datePartage   DateTime     @default(now())
  partageur     User         @relation("Partageur", fields: [partageurId], references: [id], onDelete: Cascade)

  partageurId   Int
  historique    String?  

  @@unique([documentId, userId, departementId, projetId])
}      

model Notification {
  id               Int          @id @default(autoincrement())
  userId           Int                          // Destinataire

  emetteurId       Int?                           // Celui qui dÃ©clenche la notif

  message          String                       // Ex: "Tu as reÃ§u une nouvelle tÃ¢che"

  vu               Boolean      @default(false)
  dateNotification DateTime     @default(now())   

  // Optionnels selon le contexte
  documentId       Int?
  projetId         Int?   
  tacheId          Int?
  messageId        Int?
  lien             String?

  // Relations
  user             User         @relation("NotificationDestinataire",fields: [userId], references: [id], onDelete: Cascade)

  emetteur         User?        @relation("NotificationEmetteur", fields: [emetteurId], references: [id], onDelete: Cascade)

  document         Document?    @relation("DocumentNotification",fields: [documentId], references: [id], onDelete: Cascade)

  projet           Projet?      @relation("ProjetNotification",fields: [projetId], references: [id], onDelete: Cascade)

  tache            Tache?       @relation("TacheNotification",fields: [tacheId], references: [id], onDelete: Cascade)

  messageAssocie   Message?     @relation("MessageNotification",fields: [messageId], references: [id], onDelete: Cascade)

  sousTacheProjetId Int?
  sousTacheProjet  SousTacheProjet? @relation("SousTacheProjetNotification",fields: [sousTacheProjetId], references: [id], onDelete: Cascade)

}
   
model Message {
  id         Int              @id @default(autoincrement())
  contenu    String
  pieceJointeUrl String?      // URL vers une piÃ¨ce jointe (image, PDF, etc.)

  createdAt  DateTime         @default(now())

  sender     User             @relation("MessagesEnvoyes", fields: [senderId], references: [id], onDelete: Cascade)


  senderId   Int   
  vu         Boolean          @default(false)
  receiver   User?            @relation("MessagesRecus", fields: [receiverId], references: [id], onDelete: Cascade)


  receiverId Int? 

  projet     Projet?          @relation(fields: [projetId], references: [id], onDelete: Cascade)
  projetId   Int?     

  tache      Tache?           @relation(fields: [tacheId], references: [id], onDelete: Cascade)
  tacheId    Int?

  notifications    Notification[]     @relation("MessageNotification")

  planning   Planning?        @relation(fields: [planningId], references: [id], onDelete: Cascade)
  planningId Int?
}
  
model Note {
  id        Int      @id @default(autoincrement())
  titre     String   @db.VarChar(191)
  contenu   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   

  // Relation avec l'utilisateur (auteur de la note)
  auteurId  Int
  auteur    User     @relation(fields: [auteurId], references: [id], onDelete: Cascade)   
}            

model Planning {
  id              Int           @id @default(autoincrement())   
  titre           String        @db.VarChar(191)
  date            DateTime      @default(now())
  slug            String        @unique   
  taches          TachePlanning[]
  responsableId   Int? 
  responsable     User?         @relation("ResponsablePlanning", fields: [responsableId], references: [id], onDelete: Cascade)            

  etat            Boolean?      @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages        Message[]        
}                

model TachePlanning {
  id         Int       @id @default(autoincrement())
  titre      String
  heure      String
  etat       Boolean   @default(false) // ou tu peux utiliser un enum `Statut` si tu veux plus de flexibilitÃ©
  commentaires String?
  resultatAttendu String?
  objectif  String?
  priorite  Boolean?
  planning   Planning  @relation(fields: [planningId], references: [id], onDelete: Cascade)
  planningId Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt  

}
