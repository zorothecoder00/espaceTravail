// This is your Prisma schema file, 
// learn more about it in the docs: https://pris.ly/d/prisma-schema
  
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client { 
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db { 
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Departement {
  id            Int      @id @default(autoincrement())
  nom           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projets       Projet[]
  utilisateurs  User[]   @relation("DepartementUtilisateur")
  partages      PartageDocument[]
}

enum Role {
  ADMIN
  UTILISATEUR
}

model User {   
  id            Int           @id @default(autoincrement())
  nom           String
  prenom        String
  email         String        @unique
  password      String
  role          Role          @default(UTILISATEUR)
  departement   Departement?  @relation("DepartementUtilisateur", fields: [departementId], references: [id])
  departementId Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  projets       MembreProjet[]
  taches        TacheUtilisateur[]
  partages      PartageDocument[]
  partagesEnTantQuePartageur  PartageDocument[] @relation("Partageur")
  notifications Notification[]
  accounts      Account[]
  sessions      Session[]
}

model Document {
  id            Int           @id @default(autoincrement())
  titre         String
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  partages      PartageDocument[]
  notifications Notification[] 
} 

model Projet {
  id            Int         @id @default(autoincrement())
  nom           String
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  departement   Departement @relation(fields: [departementId], references: [id])
  departementId Int
  membres       MembreProjet[]
  taches        Tache[]
  partages      PartageDocument[]
}

enum TacheStatut {
  A_FAIRE
  EN_COURS 
  TERMINE
}

model Tache {
  id           Int           @id @default(autoincrement())
  titre        String
  description  String?
  projet       Projet        @relation(fields: [projetId], references: [id])
  projetId     Int
  deadline     DateTime?
  statut       TacheStatut
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  TacheUtilisateur TacheUtilisateur[]
}

model TacheUtilisateur {
  tache        Tache @relation(fields: [tacheId], references: [id])
  tacheId      Int
  utilisateur  User  @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([tacheId, utilisateurId])
}

model MembreProjet {
  utilisateur   User   @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int
  projet        Projet @relation(fields: [projetId], references: [id])
  projetId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@id([utilisateurId, projetId])
}

model PartageDocument {
  id            Int           @id @default(autoincrement())
  document      Document      @relation(fields: [documentId], references: [id])
  documentId    Int
  utilisateur   User?         @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int?
  departement   Departement?  @relation(fields: [departementId], references: [id])
  departementId Int?
  projet        Projet?       @relation(fields: [projetId], references: [id])
  projetId      Int?
  datePartage   DateTime      @default(now())
  partageur     User          @relation("Partageur", fields: [partageurId], references: [id])
  partageurId   Int
  historique    String?

  @@unique([documentId, utilisateurId, departementId, projetId])
}

model Notification {
  id               Int      @id @default(autoincrement())
  utilisateurId    Int
  message          String
  dateNotification DateTime @default(now())
  documentId       Int
  vu               Boolean  @default(false)

  document         Document @relation(fields: [documentId], references: [id])
  utilisateur      User     @relation(fields: [utilisateurId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



